		=================================================
			Numpy---Advanced Indexing 
		=================================================
==>If we want to access multiple elements, which are not in order (arbitrary elements) of 1D,2D and N-D arrays we must use the concept of Advanced Indexing.
=>If we want access the elements based on some condition  then we can't use basic indexing and Basic Slicing Operations. To fullfill such type of requirements we must use advanced Indexing.
--------------------------------------------------------------------
=>Accessing Multiple Arbitrary Elements ---1D :
---------------------------------------------------------------------
=>Syntax:-          ndarrayname [ x ]

=>Here 'x' can be either ndarray or list which represents required indexes of arbitrary elements.
----------------
Examples:
------------------
>>> lst=[10,20,30,40,50,60,70,80,90]
>>> a=np.array(lst)
>>> print(a)----------------[10 20 30 40 50 60 70 80 90]
#access 10   30  and 80 elements 
# here indexes of 10 30 and 80  are  0 2 7
>>>lst=[0,2,7]  here [0,2,7] are indexes of 10  30 and 80 
>>> indexes=np.array(lst) # here lst converted into ndarray object
>>> print(indexes)---------[0 2 7]
>>> print(a[indexes])--------------[10 30 80]
      (OR)
>>> ind=[0,2,7]  # prepare the list of indexes of arbitray elements(10,30,80) of ndarray and pass to ndarray
>>> print(a[ind]) -----------[10 30 80]
Examples:
---------------------
Q1-->Access  20  30 80 10 10 30
>>> lst=[10,20,30,40,50,60,70,80,90]
>>> a=np.array(lst)
>>> print(a)----------------[10 20 30 40 50 60 70 80 90]
>>> ind=[1,2,7,0,0,2] # [1,2,7,0,0,2] are the indexes of 20 30 80 10 10 30
>>> print(a[ind])----------------[20 30 80 10 10 30]
-----------------------------------------------------------------------------------------------------------
=>Accessing Multiple Arbitrary Elements ---2D :
----------------------------------------------------------------------------------------------------------
=>Syntax:-  ndarrayobj[  [row indexes],[column indexes] ]
			

Examples:-
---------------
>>>import numpy as np
>>>mat=np.array([ [1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16] ] )
>>> print(mat)
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]
 [13 14 15 16]]

Q1) Access the principle diagnal elements 1  6  11  16

Ans:-      mat[ [0,1,2,3],[0,1,2,3] ]
=>When the above statement is executed, The PVM takes internally as 
             mat[ (0,0), (1,1), (2,2),(3,3) ]--------  1  6   11  16

>>> mat[ [0,1,2,3],[0,1,2,3] ]-----------array([ 1,  6, 11, 16])

Q2) Access the elements 6 14
Ans:      mat[  [1,3] , [1,1] ]
=>When the above statement is executed, The PVM takes internally as 
        mat[ (1,1),(3,1) ]

>>> mat[[1,3],[1,1]]-----------array([ 6, 14])
======================================================================
=>Accessing Multiple Arbitrary Elements ---3D :
----------------------------------------------------------------------------------------------------------------------------
Syntax:-       ndarray[ [Indexes of 2Dmatrix],[row indexes],[column indexes]  ]
-------------

----------------
Examples:
---------------
>>>import numpy as np
>>>l1=[ [ [1,2,3,4],[5,6,7,8],[9,10,11,12] ],[ [13,14,15,16],[17,18,19,20],[21,22,23,24] ]  ]
>>>mat3d=np.array(l1)
>>>print(mat3d)
>>> print(mat3d)
[[[ 1  2  3  4]
  [ 5  6  7  8]
  [ 9 10 11 12]]

 [[13 14 15 16]
  [17 18 19 20]
  [21 22 23 24]]]
>>> mat3d.ndim
3
>>> mat3d.shape
(2, 3, 4)
----------------------------------------
Q1) Access the elements 1  14  24
Ans:-    mat3d[ [0,1,1], [0,0,2], [0,1,3]  ]

When the above statement is executed, Internally PVM takes as follows.
=>mat3d[ (0,0,0),(1,0,1),(1,2,3) ]-Gives-->1  14  24


Q1) Access the elements   10  16  
>>> mat3d[[-2,-1],[-1,-3],[-3,-1]]----------array([10, 16])
====================================================
OR
========
>>> l1=[ [ [1,2,3,4],[5,6,7,8],[9,10,11,12] ],[ [13,14,15,16],[17,18,19,20],[21,22,23,24] ]  ]
>>> a=np.array(l1)
>>> a
array([[[ 1,  2,  3,  4],
        [ 5,  6,  7,  8],
        [ 9, 10, 11, 12]],

       [[13, 14, 15, 16],
        [17, 18, 19, 20],
        [21, 22, 23, 24]]])
>>> #ndarrayobj[ [MatrixIndex],[Row Index],[Col Index] ]---Syntax
>>> #ndarrayobj[ [MatrixIndex],[Row Index],[Col Index] ]
>>> #access 1,8,13,20
>>> matind=(0,0,1,1)
>>> rowind=(0,1,0,1)
>>> colind=(0,3,0,3)
>>> a[matind,rowind,colind]
array([ 1,  8, 13, 20])
>>> a[ [0,0,0,1,1,1],[0,1,2,0,1,2],[0,1,2,0,1,2] ]
array([ 1,  6, 11, 13, 18, 23])
===========================X==========================================
a=np.array([10,20,30,40,50,60,70,80,15,25,35,45,55,65,75,85])
print(a)

a.shape=(2,2,2,2)
print(a)
		[[[[10 20]
		   [30 40]]

		  [[50 60]
		   [70 80]]]


		 [[[15 25]
		   [35 45]]

		  [[55 65]
		   [75 85]]]]

#access 10 from a---4-D
a[0][0][0][0]------------10
# access 10 and 40 from  a---4D
a[[0,0],[0,0],[0,1],[0,1]]----array([10, 40])
# access 60,55 and 15 from a---4D
a[ [0,1,1],[1,1,0],[0,0,0],[1,0,0] ]----array([60, 55, 15])
===========================X===========================================